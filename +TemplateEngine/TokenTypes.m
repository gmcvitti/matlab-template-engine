classdef TokenTypes
    %TOKENTYPES Summary of this class goes here
    %   Detailed explanation goes here
    
    enumeration
        TEXT
        VALUE
        LOOP
        CONDITIONAL
        END
        NEWLINE
        COMMENT        
    end
    
    methods
        function expression = getExpression(tokenType,encapsulation)
            
            arguments
                tokenType (1,1) TemplateEngine.TokenTypes;
                encapsulation (1,1) TemplateEngine.Encapsulation = TemplateEngine.Encapsulation;
            end            
            
            switch tokenType
                case "TEXT"
                    expression = "(" + ...
                        "?<text>.*?(?=" + encapsulation.value(1) + ")|" + ...
                        "?<text>.*?(?=" + encapsulation.comment(1) + ")|" + ...
                        "?<text>.*?(?=" + encapsulation.expression(1) + ")|" + ...
                        "?<text>.*)";
                case "NEWLINE"
                    expression = "(\r\n|\r|\n)";                    
                case "VALUE"     
                    expression = ...
                        encapsulation.value(1) + ...
                        "\s*(?<value>\S+)\s*" + ...
                        encapsulation.value(2); 
                case "COMMENT"
                    expression = ...
                        encapsulation.comment(1) + ...
                        ".*?" + ...
                        encapsulation.comment(2);
                case "CONDITIONAL"
                    expression = ...
                        encapsulation.expression(1) + ...
                        "\s*if\s+(?<condition>\w+)\s*" + ...
                        encapsulation.expression(2);
                case "LOOP"
                    expression = ...
                        encapsulation.expression(1) + ...
                        "\s*foreach\s+(?<element>\w+)\s*\in\s*(?<array>\w+)\s*" + ...
                        encapsulation.expression(2);  
                case "END"
                    expression = ...
                        encapsulation.expression(1) + ...
                        "\s*end\s*" + ...
                        encapsulation.expression(2);
            end
            
        end        
    end
end

